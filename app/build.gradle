apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "kotlin-kapt"
apply plugin: "kotlin-parcelize"
apply plugin: "com.google.android.gms.oss-licenses-plugin"

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "io.github.mattpvaughn.chronicle"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 24
        versionName "0.52.1"
        testInstrumentationRunner "io.github.mattpvaughn.chronicle.application.ChronicleTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
        debug {
            // Note: toggle this away to test IAP
            applicationIdSuffix ".debug"
            debuggable true
        }
    }
    buildFeatures {
        dataBinding = true
    }
    configurations {
        all {
            exclude module: "xpp3"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
    // Shared code b/w test and androidTest: mocks "n" stuff
    sourceSets {
        final String SHARED_TEST_DIR = "src/testShared/java"
        test {
            java.srcDirs += SHARED_TEST_DIR
        }
        androidTest {
            java.srcDirs += SHARED_TEST_DIR
        }
    }
    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
            arg("room.incremental", "true")
            arg("room.expandProjection", "true")
        }
    }
    lintOptions {
        abortOnError false
    }
    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
        freeCompilerArgs += ["-Xopt-in=kotlin.time.ExperimentalTime"]
        freeCompilerArgs += ["-Xopt-in=kotlinx.coroutines.InternalCoroutinesApi"]
    }
    flavorDimensions "freeAsInBeer"
    productFlavors {
        freeAsInBeer {
            dimension "freeAsInBeer"
            buildConfigField "boolean", "FREE_AS_IN_BEER", "true"
        }
        googlePlay {
            dimension "freeAsInBeer"
            buildConfigField "boolean", "FREE_AS_IN_BEER", "false"
        }
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    // Material components
    implementation "com.google.android.material:material:$materialLibVersion"
    implementation "androidx.appcompat:appcompat:$supportlibVersion"
    implementation "androidx.fragment:fragment-ktx:$appCompatFragmentVersion"
    implementation "androidx.recyclerview:recyclerview:1.2.0"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"

    // AndroidX
    implementation "androidx.annotation:annotation:$androidxAnnotationVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-service:$lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-process:$lifecycleVersion"

    // Google Play Billing
    implementation "com.github.akshaaatt:Google-IAP:$iapWrapperVersion"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofitVersion"
    implementation("com.squareup.moshi:moshi-kotlin:$moshiKotlinVersion")
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshiKotlinVersion"

    // Kotlin coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // Timber Logging
    implementation "com.jakewharton.timber:timber:$timberVersion"

    // Fetch download manager
    implementation "androidx.tonyodev.fetch2:xfetch2:3.1.6"

    // Room DB manager
    implementation "androidx.room:room-runtime:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // Dagger dependency injection
    implementation "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    // For Plex OAuth implementation
    implementation "androidx.browser:browser:$androidXCustomTabsVersion"

    // AssistedInject to provide runtime args to Dagger injected objects
    // TODO- need further research into how this works so we can add AssistInject without adding
    //       a lot more boilerplate
//    compileOnly "com.squareup.inject:assisted-inject-annotations-dagger2:0.5.2"
//    kapt "com.squareup.inject:assisted-inject-processor-dagger2:0.5.2"

    // TODO: Remove glide, only included to delete the cache v0.45
    implementation ("com.github.bumptech.glide:glide:4.11.0") {
        // exclude okhttp import in favor of our own import
        exclude group: "com.squareup.okhttp:"
    }


        // Fresco - image loading
    implementation 'com.facebook.fresco:fresco:2.4.0'
    implementation "com.facebook.fresco:imagepipeline-okhttp3:2.4.0"

    // LocalBroadcastManager
    implementation "androidx.localbroadcastmanager:localbroadcastmanager:$localBroadcastManagerVersion"

    // Exoplayer
    implementation "com.google.android.exoplayer:exoplayer-core:$exoplayerVersion"
    implementation "com.google.android.exoplayer:exoplayer-ui:$exoplayerVersion"
    implementation "com.google.android.exoplayer:extension-mediasession:$exoplayerVersion"

    // ExoPlayer extensions for FLAC and OPUS file types
    implementation("com.github.PaulWoitaschek.ExoPlayer-Extensions:extension-opus:$exoplayerVersion") {
        transitive = false
    }
    implementation("com.github.PaulWoitaschek.ExoPlayer-Extensions:extension-flac:$exoplayerVersion"){
        transitive = false
    }

    // WorkManager helps coordinate background syncing of local data w.r.t. network conditions
    implementation "androidx.work:work-runtime-ktx:$workVersion"

    // Android team"s license displaying library- creates an activity showing all dependencies
    // by pulling from maven
    implementation "com.google.android.gms:play-services-oss-licenses:$ossLicenseActivityVersion"

    // Swipe-to-refresh
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipeRefreshLayoutVersion"

    // Seismic- for shake detection
    implementation "com.squareup:seismic:$seismicVersion"

    // Kotlin-result: TODO remove because Result is now accessible in our current build
    implementation "com.michael-bull.kotlin-result:kotlin-result:$kotlinResultVersion"

    // Test for memory leaks
    debugImplementation "com.squareup.leakcanary:leakcanary-android:2.8.1"


    /* ~~~~~~~~~~~~ Local Tests ~~~~~~~~~~ */
    testImplementation "junit:junit:$junitVersion"
    testImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    testImplementation "androidx.test:core-ktx:$androidXTestCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.room:room-testing:$roomVersion"
    testImplementation "androidx.arch.core:core-testing:$archTestingVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    testImplementation "org.hamcrest:hamcrest-all:$hamcrestVersion"
    testImplementation("io.mockk:mockk:$mockKVersion") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
    }

    /* ~~~~~~~~~~~~ Instrumented tests ~~~~~~~~~~ */
    androidTestImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test:runner:$androidxTestRunnerVersion"
    androidTestImplementation "androidx.test:rules:$androidxTestRunnerVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test.ext:junit-ktx:$androidXTestExtKotlinRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation("io.mockk:mockk:$mockKVersion") {
        exclude group: "org.jetbrains.kotlin", module: "kotlin-reflect"
    }

    androidTestImplementation "com.google.dagger:dagger:$daggerVersion"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$daggerVersion"

}
